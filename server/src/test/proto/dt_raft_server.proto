/*
 * Copyright The Dongting Project
 *
 * The Dongting Project licenses this file to you under the Apache License,
 * version 2.0 (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at:
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */
syntax = "proto3";
option java_package = "com.github.dtprj.dongting.raft.impl";

message NodePing {
  int32 local_node_id = 1;
  int32 remote_node_id = 2;
  fixed64 uuid_high = 3;
  fixed64 uuid_low = 4;
}

message RaftPing {
  int32 group_id = 1;
  int32 node_id = 2;
  string servers = 3;
  string observers = 4;
  string prepared_members = 5;
  string prepared_observers = 6;
}

message AppendEntriesReq {
  int32 group_id = 1;
  int32 term = 2;
  int32 leader_id = 3;
  fixed64 prev_log_index = 4;
  int32 prev_log_term = 5;
  fixed64 leader_commit = 6;
  int32 logs_size = 7;
  repeated LogItem entries = 8[packed=false];
}

message LogItem {
  int32 type = 1;
  int32 bizType = 2;
  int32 term = 3;
  fixed64 index = 4;
  int32 prev_log_term = 5;
  fixed64 timestamp = 6;
  bytes header = 7;
  bytes body = 8;
}

message AppendEntriesResp {
  int32 term = 1;
  int32 success = 2;
  ///////////////////////////
  int32 append_code = 3;
  int32 suggest_term = 4;
  fixed64 suggest_index = 5;
}

message RequestVoteReq {
  int32 group_id = 1;
  int32 term = 2;
  int32 candidate_id = 3;
  fixed64 last_log_index = 4;
  int32 last_log_term = 5;
  int32 pre_vote = 6;
}

message RequestVoteResp {
  int32 term = 1;
  int32 vote_granted = 2;
}

// use AppendEntriesResp
message InstallSnapshotReq {
  int32 group_id = 1;
  int32 term = 2;
  int32 leader_id = 3;
  fixed64 last_included_index = 4;
  int32 last_included_term = 5;
  fixed64 offset = 6;
  bool done = 7;

  fixed64 next_write_pos = 8;
  repeated fixed32 members = 9[packed = false];
  repeated fixed32 observers = 10[packed = false];
  repeated fixed32 prepared_members = 11[packed = false];
  repeated fixed32 prepared_observers = 12[packed = false];
  fixed64 last_config_change_index = 13;

  bytes data = 15;
}

message TransferLeaderReq {
  int32 group_id = 1;
  int32 term = 2; // not used in admin transfer leader request
  int32 old_leader_id = 3;
  int32 new_leader_id = 4;
  fixed64 log_index = 5; // not used in admin transfer leader request
}

// return EmptyBodyRespFrame

message QueryStatusReq {
  int32 group_id = 1;
}

message QueryStatusResp {
  int32 group_id = 1;
  int32 node_id = 2;
  int32 term = 3;
  int32 leader_id = 4;
  fixed64 commit_index = 5;
  fixed64 last_applied = 6;
  fixed64 last_apply_time_to_now_millis = 7;
  fixed64 last_log_index = 8;
  fixed64 apply_lag_millis = 9;
  repeated fixed32 members = 10[packed = false];
  repeated fixed32 observers = 11[packed = false];
  repeated fixed32 prepared_members = 12[packed = false];
  repeated fixed32 prepared_observers = 13[packed = false];
}

// only use for admin commands, raft server use log replicate to perform config change
message AdminPrepareConfigChangeReq {
  int32 group_id = 1;
  repeated fixed32 members = 2[packed = false];
  repeated fixed32 observers = 3[packed = false];
  repeated fixed32 prepared_members = 4[packed = false];
  repeated fixed32 prepared_observers = 5[packed = false];
}

message AdminPrepareConfigChangeResp {
  fixed64 prepare_index = 1;
}

message AdminCommitConfigChangeReq {
  int32 group_id = 1;
  fixed64 prepare_index = 2;
}

message AdminCommitConfigChangeResp {
  fixed64 commit_index = 1;
}

message AdminAbortConfigChangeReq {
  int32 group_id = 1;
  fixed64 prepare_index = 2;
}

message AdminAbortConfigChangeResp {
  fixed64 abort_index = 1;
}

message AdminAddGroupReq {
  int32 group_id = 1;
  string node_id_of_members = 2;
  string node_id_of_observers = 3;
}

// return EmptyBodyRespFrame

message AdminRemoveGroupReq {
  int32 group_id = 1;
}

// return EmptyBodyRespFrame

message AdminAddNodeReq {
  int32 node_id = 1;
  string host = 2;
  int32 port = 3;
}

// return EmptyBodyRespFrame

message AdminRemoveNodeReq {
  int32 node_id = 1;
}

// return EmptyBodyRespFrame